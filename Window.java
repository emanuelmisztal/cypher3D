/*
Cypher3D
Author: Emanuel Misztal
Desription: 3D extension of Playfair cypher
 */
package cypher3d;

public class Window extends javax.swing.JFrame {
    private Cube cube;
    /** Creates new form Window */
    public Window() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        codeInputLabel = new javax.swing.JLabel();
        codeOutputLabel = new javax.swing.JLabel();
        codeInput = new javax.swing.JTextField();
        codeOutput = new javax.swing.JTextField();
        codeButton = new javax.swing.JButton();
        decodeInputLabel = new javax.swing.JLabel();
        decodeOutputLabel = new javax.swing.JLabel();
        decodeInput = new javax.swing.JTextField();
        decodeOutput = new javax.swing.JTextField();
        decodeButton = new javax.swing.JButton();
        generateCubeLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        generateButton = new javax.swing.JButton();
        codeLabel = new javax.swing.JLabel();
        decodeLabel = new javax.swing.JLabel();
        matrixLabel = new javax.swing.JLabel();
        cubeRowLabel = new javax.swing.JLabel();
        rowField = new javax.swing.JTextField();
        copyrightField = new javax.swing.JTextArea();
        passField = new javax.swing.JTextField();
        matrixField = new javax.swing.JTextArea();
        colLabel = new javax.swing.JLabel();
        rowLabel = new javax.swing.JLabel();
        colSelect = new javax.swing.JComboBox<>();
        rowSelect = new javax.swing.JComboBox<>();
        showButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("cypher3d");
        setBackground(new java.awt.Color(127, 127, 127));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(600, 600));

        codeInputLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        codeInputLabel.setText("INPUT");

        codeOutputLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        codeOutputLabel.setText("OUTPUT");

        codeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeInputActionPerformed(evt);
            }
        });

        codeOutput.setEditable(false);

        codeButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        codeButton.setText("CODE");
        codeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeButtonActionPerformed(evt);
            }
        });

        decodeInputLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        decodeInputLabel.setText("INPUT");

        decodeOutputLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        decodeOutputLabel.setText("OUTPUT");

        decodeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decodeInputActionPerformed(evt);
            }
        });

        decodeOutput.setEditable(false);

        decodeButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        decodeButton.setText("DECODE");
        decodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decodeButtonActionPerformed(evt);
            }
        });

        generateCubeLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        generateCubeLabel.setText("GENERATE CUBE");

        passwordLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        passwordLabel.setText("PASSWORD");

        generateButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        generateButton.setText("GENERATE");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        codeLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        codeLabel.setText("CODE");

        decodeLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        decodeLabel.setText("DECODE");

        matrixLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        matrixLabel.setText("MATRIX");

        cubeRowLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        cubeRowLabel.setText("CUBE ROW");

        rowField.setEditable(false);

        copyrightField.setEditable(false);
        copyrightField.setColumns(20);
        copyrightField.setRows(3);
        copyrightField.setText("Cypher3D\nAuthor: Emanuel Misztal\nDesription: 3D extension of Playfair cypher");

        matrixField.setEditable(false);
        matrixField.setColumns(20);
        matrixField.setRows(5);

        colLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        colLabel.setText("COL");

        rowLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rowLabel.setText("ROW");

        colSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4" }));
        colSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colSelectActionPerformed(evt);
            }
        });

        rowSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4" }));

        showButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        showButton.setText("SHOW");
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });

        copyButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        copyButton.setText("COPYTO DECODE");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(codeInputLabel)
                                    .addComponent(passwordLabel)
                                    .addComponent(generateCubeLabel)
                                    .addComponent(codeButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(codeInput)
                                .addGap(38, 38, 38)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(copyrightField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(codeOutputLabel))
                            .addComponent(codeOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(copyButton))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(generateButton)
                            .addComponent(codeLabel)
                            .addComponent(decodeLabel)
                            .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(decodeInputLabel)
                            .addComponent(decodeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(decodeButton)
                            .addComponent(matrixLabel)
                            .addComponent(matrixField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(decodeOutputLabel)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cubeRowLabel)
                                    .addComponent(decodeOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(rowField, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(colSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(rowSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(rowLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(colLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addComponent(showButton)))
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(generateCubeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordLabel))
                    .addComponent(copyrightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(codeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(codeInputLabel)
                            .addComponent(codeOutputLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(codeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(codeOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(codeButton))
                    .addComponent(copyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decodeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decodeInputLabel)
                    .addComponent(decodeOutputLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decodeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decodeOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decodeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matrixLabel)
                    .addComponent(cubeRowLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rowField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(colLabel)
                            .addComponent(rowLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(colSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rowSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(matrixField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void codeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeButtonActionPerformed
        String toCode = codeInput.getText(), tmp = "", output = "";
        int i = 0;
        
        if(toCode.length() != 0){
            if(toCode.length() % 2 != 0) toCode += "x";
        
            while(i + 1 < toCode.length()){
                tmp = "" + toCode.charAt(i) + toCode.charAt(i+1);
                output += cube.coder(tmp, false);
                i += 2;
            }
            codeOutput.setText(output);
        }
    }//GEN-LAST:event_codeButtonActionPerformed

    private void decodeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decodeInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_decodeInputActionPerformed

    private void codeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codeInputActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        cube = new Cube(passField.getText());
        matrixField.setText(cube.printMatrix());
    }//GEN-LAST:event_generateButtonActionPerformed

    private void colSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_colSelectActionPerformed

    private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
        if(cube != null) rowField.setText(cube.printCubeRow(colSelect.getSelectedIndex(), rowSelect.getSelectedIndex()));
    }//GEN-LAST:event_showButtonActionPerformed

    private void decodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decodeButtonActionPerformed
        String toDecode = decodeInput.getText(), tmp = "", output = "";
        int i = 0;
        while(i + 1 < toDecode.length()){
            tmp = "" + toDecode.charAt(i) + toDecode.charAt(i+1);
            output += cube.coder(tmp, true);
            i += 2;
        }
        decodeOutput.setText(output);
    }//GEN-LAST:event_decodeButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        decodeInput.setText(codeOutput.getText());
    }//GEN-LAST:event_copyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton codeButton;
    private javax.swing.JTextField codeInput;
    private javax.swing.JLabel codeInputLabel;
    private javax.swing.JLabel codeLabel;
    private javax.swing.JTextField codeOutput;
    private javax.swing.JLabel codeOutputLabel;
    private javax.swing.JLabel colLabel;
    private javax.swing.JComboBox<String> colSelect;
    private javax.swing.JButton copyButton;
    private javax.swing.JTextArea copyrightField;
    private javax.swing.JLabel cubeRowLabel;
    private javax.swing.JButton decodeButton;
    private javax.swing.JTextField decodeInput;
    private javax.swing.JLabel decodeInputLabel;
    private javax.swing.JLabel decodeLabel;
    private javax.swing.JTextField decodeOutput;
    private javax.swing.JLabel decodeOutputLabel;
    private javax.swing.JButton generateButton;
    private javax.swing.JLabel generateCubeLabel;
    private javax.swing.JTextArea matrixField;
    private javax.swing.JLabel matrixLabel;
    private javax.swing.JTextField passField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField rowField;
    private javax.swing.JLabel rowLabel;
    private javax.swing.JComboBox<String> rowSelect;
    private javax.swing.JButton showButton;
    // End of variables declaration//GEN-END:variables

}
